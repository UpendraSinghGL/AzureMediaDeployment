{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workflows_Logic_SendEmail": {
			"defaultValue": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/Logic-SendEmail')]",
			"type": "String"
		},
		"workflows_Logic_ReadAzureConfiguration": {
			"defaultValue": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/Logic-ReadAzureConfiguration')]",
			"type": "String"
		},
		"connection_commondataservice": {
			"type": "string",
			"defaultValue": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/commondataservice')]"
		},
		"crmOrgName": {
			"type": "string",
			"metadata": {
				"description": "description"
			}
		},
		"eventHubName": {
			"type": "string",
			"metadata": {
				"description": "description"
			}
		},
		"connections_eventhubs": {
			"defaultValue": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/eventhubs')]",
			"type": "String"
		}
	},
	"functions": [
		{
			"namespace": "durin",
			"members": {
				"wrapInQuote": {
					"parameters": [
						{
							"name": "text",
							"type": "string"
						}
					],
					"output": {
						"value": "[concat('''', parameters('text'),'''')]",
						"type": "string"
					}
				}
			}
		}
	],
	"variables": {
		"org": "[durin.wrapInQuote(concat(parameters('crmOrgName'),'.crm'))]"
	},
	"resources": [
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2017-07-01",
			"name": "Logic-GetEventOnPipelineRun",
			"location": "[resourceGroup().location]",
			"properties": {
				"definition": {
					"$schema": "https://schema.management.azure.com/schemas/2016-06-01/Microsoft.Logic.json",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"$connections": {
							"defaultValue": {},
							"type": "Object"
						}
					},
					"triggers": {
						"When_events_are_available_in_Event_Hub": {
							"recurrence": {
								"frequency": "Minute",
								"interval": 1
							},
							"splitOn": "@triggerBody()",
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['eventhubs']['connectionId']"
									}
								},
								"method": "get",
								"path": "[concat('/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote(parameters('eventHubName')),'))}/events/batch/head')]",
								"queries": {
									"consumerGroupName": "$Default",
									"contentType": "application/json"
								}
							}
						}
					},
					"actions": {
						"For_each": {
							"foreach": "@triggerBody()?['ContentData']?['records']",
							"actions": {
								"Compose_assetId": {
									"runAfter": {
										"Compose_vendorCopyStatusId": [
											"Succeeded"
										]
									},
									"type": "Compose",
									"inputs": "@split(items('For_each')?['pipelineName'],'_')[1]"
								},
								"Compose_pipelineRunId": {
									"runAfter": {},
									"type": "Compose",
									"inputs": "@if(contains(items('For_each'),'pipelineRunId'),items('For_each')?['pipelineRunId'],items('For_each')?['runId'])"
								},
								"Compose_vendorCopyStatusId": {
									"runAfter": {
										"Compose_pipelineRunId": [
											"Succeeded"
										]
									},
									"type": "Compose",
									"inputs": "@first(split(items('For_each')?['pipelineName'],'_'))"
								},
								"Get_record": {
									"runAfter": {
										"Compose_assetId": [
											"Succeeded"
										]
									},
									"type": "ApiConnection",
									"inputs": {
										"host": {
											"connection": {
												"name": "@parameters('$connections')['commondataservice']['connectionId']"
											}
										},
										"method": "get",
										"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_assets'),'))}/items/@{encodeURIComponent(encodeURIComponent(outputs(',durin.wrapInQuote('Compose_assetId'),')))}')]"
									}
								},
								"Switch": {
									"runAfter": {
										"Get_record": [
											"Succeeded"
										]
									},
									"cases": {
										"Case_-_Failed": {
											"case": "Failed",
											"actions": {
												"Compose_email_body2": {
													"runAfter": {
														"Compose_subject2": [
															"Succeeded"
														]
													},
													"type": "Compose",
													"inputs": "<p> Operation: Copy, </br>\nStatus: Failed,</br>\nAsset Name: @{body('Get_record')?['media_name']}, </br>\nAsset Id: @{body('Get_record')?['media_assetid']}, </br>\nFailure Reason: @{items('For_each')?['properties']?['Message']}\n</p>"
												},
												"Compose_subject2": {
													"runAfter": {
														"Create_error_log_record": [
															"Succeeded"
														]
													},
													"type": "Compose",
													"inputs": "Copy failed for asset: @{body('Get_record')?['media_name']}"
												},
												"Condition_2": {
													"actions": {
														"Update_a_record_in_Assets_status_failed": {
															"runAfter": {},
															"type": "ApiConnection",
															"inputs": {
																"body": {
																	"media_copystatus": 207940002
																},
																"host": {
																	"connection": {
																		"name": "@parameters('$connections')['commondataservice']['connectionId']"
																	}
																},
																"method": "patch",
																"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_assets'),'))}/items/@{encodeURIComponent(encodeURIComponent(outputs(',durin.wrapInQuote('Compose_assetId'),')))}')]",
															}
														}
													},
													"runAfter": {},
													"else": {
														"actions": {
															"Update_a_record_in_VendorCopyStatuses_status_failed": {
																"runAfter": {},
																"type": "ApiConnection",
																"inputs": {
																	"body": {
																		"media_copystatus": 207940002
																	},
																	"host": {
																		"connection": {
																			"name": "@parameters('$connections')['commondataservice']['connectionId']"
																		}
																	},
																	"method": "patch",
																	"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_vendorcopystatuses'),'))}/items/@{encodeURIComponent(encodeURIComponent(outputs(',durin.wrapInQuote('Compose_vendorCopyStatusId'),')))}')]"
																}
															}
														}
													},
													"expression": {
														"and": [
															{
																"equals": [
																	"@outputs('Compose_vendorCopyStatusId')",
																	"@string(0)"
																]
															}
														]
													},
													"type": "If"
												},
												"Create_error_log_record": {
													"runAfter": {
														"Condition_2": [
															"Succeeded"
														]
													},
													"type": "ApiConnection",
													"inputs": {
														"body": {
															"_media_asset_value": "@{outputs('Compose_assetId')}",
															"media_description": "@{items('For_each')?['properties']?['Message']}",
															"media_name": "Copy failed for asset: @{body('Get_record')?['media_name']}"
														},
														"host": {
															"connection": {
																"name": "@parameters('$connections')['commondataservice']['connectionId']"
															}
														},
														"method": "post",
														"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_asseterrorlogs'),'))}/items')]"
													}
												},
												"Create_error_log_record_for_mail": {
													"runAfter": {
														"Logic-SendEmail": [
															"Failed",
															"TimedOut"
														]
													},
													"type": "ApiConnection",
													"inputs": {
														"body": {
															"_media_asset_value": "@{outputs('Compose_assetId')}",
															"media_name": "Email not sent"
														},
														"host": {
															"connection": {
																"name": "@parameters('$connections')['commondataservice']['connectionId']"
															}
														},
														"method": "post",
														"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_asseterrorlogs'),'))}/items')]"
													}
												},
												"Logic-SendEmail": {
													"runAfter": {
														"Compose_email_body2": [
															"Succeeded"
														]
													},
													"type": "Workflow",
													"inputs": {
														"body": {
															"EmailBody": "@{outputs('Compose_email_body2')}",
															"Recipient": "@{body('Get_record')?['media_notificationemailaddress']}",
															"Subject": "@{outputs('Compose_subject2')}"
														},
														"host": {
															"triggerName": "manual",
															"workflow": {
																"id": "[parameters('workflows_Logic_SendEmail')]"
															}
														}
													}
												}
											}
										},
										"Case_-_Succeeded": {
											"case": "Succeeded",
											"actions": {
												"Check_output_dataset_is_storage_or_nexis": {
													"actions": {
														"Set_variable-Nexis_Output_Dataset_Name": {
															"runAfter": {},
															"type": "SetVariable",
															"inputs": {
																"name": "OutputDatasetName",
																"value": "@{concat(outputs('Compose_assetId'),'_','OutputDatasetOnPrem')}"
															}
														}
													},
													"runAfter": {
														"HTTP_Delete_Pipeline": [
															"Succeeded"
														]
													},
													"else": {
														"actions": {
															"Set_variable-blob_storage_Output_Dataset_Name": {
																"runAfter": {},
																"type": "SetVariable",
																"inputs": {
																	"name": "OutputDatasetName",
																	"value": "@{concat(outputs('Compose_vendorCopyStatusId'),'_','OutputDatasetBlob')}"
																}
															}
														}
													},
													"expression": {
														"and": [
															{
																"equals": [
																	"@outputs('Compose_vendorCopyStatusId')",
																	"@string(0)"
																]
															}
														]
													},
													"type": "If"
												},
												"Compose_email_body": {
													"runAfter": {
														"Compose_subject": [
															"Succeeded"
														]
													},
													"type": "Compose",
													"inputs": "<p> Operation: Copy, </br>\nStatus: Succeeded, </br>\nAsset Name: @{body('Get_record')?['media_name']}, </br>\nAsset Id: @{body('Get_record')?['media_assetid']}, </br>\nRun Start: @{string(body('HTTP_Get_Pipeline_Run')?['runStart'])}, </br>\nRun End: @{string(body('HTTP_Get_Pipeline_Run')?['runEnd'])}, </br>\nDuration (Seconds):  @{div(int(body('HTTP_Get_Pipeline_Run')?['durationInMs']),1000)}\n</p>"
												},
												"Compose_subject": {
													"runAfter": {
														"HTTP_Get_Pipeline_Run": [
															"Succeeded"
														]
													},
													"type": "Compose",
													"inputs": "Copy completed successfully for asset: @{body('Get_record')?['media_name']}"
												},
												"Condition": {
													"actions": {
														"Update_a_record_in_Assets_status_succeeded": {
															"runAfter": {},
															"type": "ApiConnection",
															"inputs": {
																"body": {
																	"media_copystatus": 207940001
																},
																"host": {
																	"connection": {
																		"name": "@parameters('$connections')['commondataservice']['connectionId']"
																	}
																},
																"method": "patch",
																"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_assets'),'))}/items/@{encodeURIComponent(encodeURIComponent(outputs(',durin.wrapInQuote('Compose_assetId'),')))}')]"
															}
														}
													},
													"runAfter": {
														"HTTP_Get_Access_Token": [
															"Succeeded"
														]
													},
													"else": {
														"actions": {
															"Update_a_record_in_VendorCopyStatuses_status_succeeded": {
																"runAfter": {},
																"type": "ApiConnection",
																"inputs": {
																	"body": {
																		"media_copystatus": 207940001
																	},
																	"host": {
																		"connection": {
																			"name": "@parameters('$connections')['commondataservice']['connectionId']"
																		}
																	},
																	"method": "patch",
																	"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_vendorcopystatuses'),'))}/items/@{encodeURIComponent(encodeURIComponent(outputs(',durin.wrapInQuote('Compose_vendorCopyStatusId'),')))}')]"
																}
															}
														}
													},
													"expression": {
														"and": [
															{
																"equals": [
																	"@outputs('Compose_vendorCopyStatusId')",
																	"@string(0)"
																]
															}
														]
													},
													"type": "If"
												},
												"Create_error_log_record_for_mail2": {
													"runAfter": {
														"Logic-SendEmail_2": [
															"Failed",
															"TimedOut"
														]
													},
													"type": "ApiConnection",
													"inputs": {
														"body": {
															"_media_asset_value": "@{outputs('Compose_assetId')}",
															"media_name": "Email not sent"
														},
														"host": {
															"connection": {
																"name": "@parameters('$connections')['commondataservice']['connectionId']"
															}
														},
														"method": "post",
														"path": "[concat('/v2/datasets/@{encodeURIComponent(encodeURIComponent(',variables('org'),'))}/tables/@{encodeURIComponent(encodeURIComponent(',durin.wrapInQuote('media_asseterrorlogs'),'))}/items')]"
													}
												},
												"HTTP_Delete_Pipeline": {
													"runAfter": {
														"Logic-SendEmail_2": [
															"Succeeded"
														]
													},
													"type": "Http",
													"inputs": {
														"headers": {
															"Accept": "application/json",
															"Authorization": "Bearer @{body('HTTP_Get_Access_Token')?['access_token']}",
															"Content-Type": "application/json"
														},
														"method": "DELETE",
														"uri": "@{concat('https://management.azure.com/subscriptions/', variables('configurations')?['SubscriptionId'], '/resourceGroups/', variables('configurations')?['ResourceGroup'], '/providers/Microsoft.DataFactory/factories/', variables('configurations')?['FactoryName'], '/pipelines/', items('For_each')?['pipelineName'], '?api-version=', variables('configurations')?['api-version'])}"
													}
												},
												"HTTP_Delete_input_dataset": {
													"runAfter": {
														"HTTP_delete_output_dataset_for_blob_storage": [
															"Succeeded"
														]
													},
													"type": "Http",
													"inputs": {
														"headers": {
															"Accept": "application/json",
															"Authorization": "Bearer @{body('HTTP_Get_Access_Token')?['access_token']}",
															"Content-Type": "application/json"
														},
														"method": "DELETE",
														"uri": "@{concat('https://management.azure.com/subscriptions/', variables('configurations')?['SubscriptionId'], '/resourceGroups/', variables('configurations')?['ResourceGroup'], '/providers/Microsoft.DataFactory/factories/', variables('configurations')?['FactoryName'], '/datasets/','InputDataset',items('For_each')?['pipelineName'],'?api-version=', variables('configurations')?['api-version'])}"
													}
												},
												"HTTP_Get_Access_Token": {
													"runAfter": {},
													"type": "Http",
													"inputs": {
														"body": "grant_type=client_credentials&client_id=@{variables('configurations')?['AadClientId']}&client_secret=@{variables('configurations')?['AadSecret']}&resource=https://management.core.windows.net/",
														"headers": {
															"Content-Type": "application/x-www-form-urlencoded",
															"Keep-Alive": "true"
														},
														"method": "POST",
														"uri": "@{concat('https://login.microsoftonline.com/', variables('configurations')?['AadTenantDomain'], '/oauth2/token')}"
													}
												},
												"HTTP_Get_Pipeline_Run": {
													"runAfter": {
														"Condition": [
															"Succeeded"
														]
													},
													"type": "Http",
													"inputs": {
														"headers": {
															"Accept": "application/json",
															"Authorization": "Bearer @{body('HTTP_Get_Access_Token')?['access_token']}",
															"Content-Type": "application/json"
														},
														"method": "GET",
														"uri": "@{concat('https://management.azure.com/subscriptions/', variables('configurations')?['SubscriptionId'], '/resourceGroups/', variables('configurations')?['ResourceGroup'], '/providers/Microsoft.DataFactory/factories/', variables('configurations')?['FactoryName'], '/pipelineruns/', outputs('Compose_pipelineRunId'), '?api-version=', variables('configurations')?['api-version'])}"
													}
												},
												"HTTP_delete_output_dataset_for_blob_storage": {
													"runAfter": {
														"Check_output_dataset_is_storage_or_nexis": [
															"Succeeded"
														]
													},
													"type": "Http",
													"inputs": {
														"headers": {
															"Accept": "application/json",
															"Authorization": "Bearer @{body('HTTP_Get_Access_Token')?['access_token']}",
															"Content-Type": "application/json"
														},
														"method": "DELETE",
														"uri": "@{concat('https://management.azure.com/subscriptions/', variables('configurations')?['SubscriptionId'], '/resourceGroups/', variables('configurations')?['ResourceGroup'], '/providers/Microsoft.DataFactory/factories/', variables('configurations')?['FactoryName'], '/datasets/',variables('OutputDatasetName'),'?api-version=', variables('configurations')?['api-version'])}"
													}
												},
												"Logic-SendEmail_2": {
													"runAfter": {
														"Compose_email_body": [
															"Succeeded"
														]
													},
													"type": "Workflow",
													"inputs": {
														"body": {
															"EmailBody": "@{outputs('Compose_email_body')}",
															"Recipient": "@{body('Get_record')?['media_notificationemailaddress']}",
															"Subject": "@{outputs('Compose_subject')}"
														},
														"host": {
															"triggerName": "manual",
															"workflow": {
																"id": "[parameters('workflows_Logic_SendEmail')]"
															}
														}
													}
												}
											}
										}
									},
									"default": {
										"actions": {}
									},
									"expression": "@items('For_each')?['status']",
									"type": "Switch"
								}
							},
							"runAfter": {
								"Initialize_variable_OutputDatasetName": [
									"Succeeded"
								]
							},
							"type": "Foreach"
						},
						"Initialize_variable": {
							"runAfter": {},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "Content",
										"type": "string",
										"value": "@{triggerBody()?['ContentData']}"
									}
								]
							}
						},
						"Initialize_variable_AssetId": {
							"runAfter": {
								"Initialize_variable_configurations": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "AssetId",
										"type": "string"
									}
								]
							}
						},
						"Initialize_variable_OutputDatasetName": {
							"runAfter": {
								"Initialize_variable_PipelineRunId": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "OutputDatasetName",
										"type": "string"
									}
								]
							}
						},
						"Initialize_variable_PipelineRunId": {
							"runAfter": {
								"Initialize_variable_AssetId": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "PipelineRunId",
										"type": "string"
									}
								]
							}
						},
						"Initialize_variable_configurations": {
							"runAfter": {
								"Logic-ReadAzureConfiguration": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "configurations",
										"type": "object",
										"value": "@body('Logic-ReadAzureConfiguration')"
									}
								]
							}
						},
						"Logic-ReadAzureConfiguration": {
							"runAfter": {
								"Initialize_variable": [
									"Succeeded"
								]
							},
							"type": "Workflow",
							"inputs": {
								"host": {
									"triggerName": "manual",
									"workflow": {
										"id": "[parameters('workflows_Logic_ReadAzureConfiguration')]"
									}
								}
							}
						}
					},
					"outputs": {}
				},
				"parameters": {
					"$connections": {
						"value": {
							"commondataservice": {
								"connectionId": "[parameters('connection_commondataservice')]",
								"connectionName": "commondataservice",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/commondataservice')]"
							},
							"eventhubs": {
								"connectionId": "[parameters('connections_eventhubs')]",
								"connectionName": "eventhubs",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/eventhubs')]"
							}
						}
					}
				}
			}
		}
	]
}